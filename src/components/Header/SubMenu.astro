---
interface Props {
	children: any
}
const { children } = Astro.props;
import MenuLink from './MenuLink.astro';
import { Icon } from 'astro-icon/components';
let classes = 'left-0 lg:absolute top-full min-w-full w-fit lg:opacity-0 lg:invisible lg:-translate-y-1 transition-all bg-white group-hover:opacity-100 group-hover:visible group-hover:translate-y-0 lg:shadow-2xl z-[1000] lg:border-t';
classes = !Array.isArray(children) && Object.keys(children).length > 1 ? classes + ' lg:flex lg:justify-center' : classes;
---
{children && (
	<div class={classes}>
		{!Array.isArray(children) && Object.keys(children).length > 0 ? Object.keys(children).map( key => (
			<div class={`relative min-w-[150px] lg:border-r lg:first:border-l`} x-data="{isOpenSubMenu: false}">
				{ Object.keys(children).length > 1 ? (
					<div 
						class="relative flex items-center justify-between font-bold border-b px-5 lg:text-lg py-2.5"
						@click="isOpenSubMenu = !isOpenSubMenu"
					>
						{key}
						<div 
							class="absolute right-0 top-0 h-full aspect-square flex items-center justify-center origin-center transition-transform lg:hidden"
							:class="{'rotate-90': isOpenSubMenu}"
						>
							<Icon name="mdi:chevron-right" class="size-6" />
						</div>
					</div>
				) : '' }
				<div 
					class={`lg:block ${children[key].length > 10 ? 'cols-' + Math.min(Math.floor((children[key].length / 10) + 1), 5) : ''}`}
					:class="{'hidden': !isOpenSubMenu }"
				>
					{ children[key].map(child => (<MenuLink link={child} sublink={true} />)) }
				</div>
			</div>
		) ) : Array.isArray(children) && children.length > 0 ? children.map(child => (<MenuLink link={child} sublink={true} />)) : ('')
		}
	</div>
)}